{"/home/travis/build/npmtest/node-npmtest-node-quickbooks/test.js":"/* istanbul instrument in package npmtest_node_quickbooks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-quickbooks/lib.npmtest_node_quickbooks.js":"/* istanbul instrument in package npmtest_node_quickbooks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_quickbooks = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_quickbooks = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-quickbooks/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-quickbooks && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_quickbooks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_quickbooks\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_quickbooks.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_quickbooks.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_quickbooks.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_quickbooks.__dirname + '/lib.npmtest_node_quickbooks.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-quickbooks/node_modules/node-quickbooks/index.js":"/**\n * @file Node.js client for QuickBooks V3 API\n * @name node-quickbooks\n * @author Michael Cohen <michael_cohen@intuit.com>\n * @license ISC\n * @copyright 2014 Michael Cohen\n */\n\nvar request = require('request'),\n    uuid    = require('node-uuid'),\n    debug   = require('request-debug'),\n    util    = require('util'),\n    moment  = require('moment'),\n    _       = require('underscore'),\n    Promise = require('bluebird'),\n    version = require('./package.json').version\n\nmodule.exports = QuickBooks\n\nQuickBooks.REQUEST_TOKEN_URL          = 'https://oauth.intuit.com/oauth/v1/get_request_token'\nQuickBooks.ACCESS_TOKEN_URL           = 'https://oauth.intuit.com/oauth/v1/get_access_token'\nQuickBooks.APP_CENTER_BASE            = 'https://appcenter.intuit.com'\nQuickBooks.APP_CENTER_URL             = QuickBooks.APP_CENTER_BASE + '/Connect/Begin?oauth_token='\nQuickBooks.RECONNECT_URL              = QuickBooks.APP_CENTER_BASE + '/api/v1/connection/reconnect'\nQuickBooks.V3_ENDPOINT_BASE_URL       = 'https://sandbox-quickbooks.api.intuit.com/v3/company/'\nQuickBooks.QUERY_OPERATORS            = ['=', 'IN', '<', '>', '<=', '>=', 'LIKE']\n\n/**\n * Node.js client encapsulating access to the QuickBooks V3 Rest API. An instance\n * of this class should be instantiated on behalf of each user accessing the api.\n *\n * @param consumerKey - application key\n * @param consumerSecret  - application password\n * @param token - the OAuth generated user-specific key\n * @param tokenSecret - the OAuth generated user-specific password\n * @param realmId - QuickBooks companyId, returned as a request parameter when the user is redirected to the provided callback URL following authentication\n * @param useSandbox - boolean - See https://developer.intuit.com/v2/blog/2014/10/24/intuit-developer-now-offers-quickbooks-sandboxes\n * @param debug - boolean flag to turn on logging of HTTP requests, including headers and body\n * @constructor\n */\nfunction QuickBooks(consumerKey, consumerSecret, token, tokenSecret, realmId, useSandbox, debug) {\n  var prefix           = _.isObject(consumerKey) ? 'consumerKey.' : ''\n  this.consumerKey     = eval(prefix + 'consumerKey')\n  this.consumerSecret  = eval(prefix + 'consumerSecret')\n  this.token           = eval(prefix + 'token')\n  this.tokenSecret     = eval(prefix + 'tokenSecret')\n  this.realmId         = eval(prefix + 'realmId')\n  this.useSandbox      = eval(prefix + 'useSandbox')\n  this.debug           = eval(prefix + 'debug')\n  this.endpoint        = this.useSandbox ? QuickBooks.V3_ENDPOINT_BASE_URL : QuickBooks.V3_ENDPOINT_BASE_URL.replace('sandbox-', '')\n}\n\n/**\n * Batch operation to enable an application to perform multiple operations in a single request.\n * The following batch items are supported:\n     create\n     update\n     delete\n     query\n * The maximum number of batch items in a single request is 25.\n *\n * @param  {object} items - JavaScript array of batch items\n * @param  {function} callback - Callback function which is called with any error and list of BatchItemResponses\n */\nQuickBooks.prototype.batch = function(items, callback) {\n  module.request(this, 'post', {url: '/batch'}, {BatchItemRequest: items}, callback)\n}\n\n/**\n * The change data capture (CDC) operation returns a list of entities that have changed since a specified time.\n *\n * @param  {object} entities - Comma separated list or JavaScript array of entities to search for changes\n * @param  {object} since - JavaScript Date or string representation of the form '2012-07-20T22:25:51-07:00' to look back for changes until\n * @param  {function} callback - Callback function which is called with any error and list of changes\n */\nQuickBooks.prototype.changeDataCapture = function(entities, since, callback) {\n  var url = '/cdc?entities='\n  url += typeof entities === 'string' ? entities : entities.join(',')\n  url += '&changedSince='\n  url += typeof since === 'string' ? since : moment(since).format()\n  module.request(this, 'get', {url: url}, null, callback)\n}\n\n/**\n * Uploads a file as an Attachable in QBO, optionally linking it to the specified\n * QBO Entity.\n *\n * @param  {object} stream - ReadableStream of file contents\n * @param  {object} entityType - optional string name of the QBO entity the Attachable will be linked to (e.g. Invoice)\n * @param  {object} entityId - optional Id of the QBO entity the Attachable will be linked to\n * @param  {function} callback - callback which receives the newly created Attachable\n */\nQuickBooks.prototype.upload = function(stream, entityType, entityId, callback) {\n  var that = this\n  var opts = {\n    url: '/upload',\n    formData: {\n      file_content_01: stream\n    }\n  }\n  module.request(this, 'post', opts, null, module.unwrap(function(err, data) {\n    if (err) {\n      (callback || entityType)(err, null)\n    } else if (_.isFunction(entityType)) {\n      entityType(null, data[0].Attachable)\n    } else {\n      var id = data[0].Attachable.Id\n      that.updateAttachable({\n        Id: id,\n        SyncToken: '0',\n        AttachableRef: [{\n          EntityRef: {\n            type: entityType,\n            value: entityId + ''\n          }\n        }]\n      }, function(err, data) {\n        callback(err, data)\n      })\n    }\n  }, 'AttachableResponse'))\n}\n\n/**\n * Creates the Account in QuickBooks\n *\n * @param  {object} account - The unsaved account, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Account\n */\nQuickBooks.prototype.createAccount = function(account, callback) {\n  module.create(this, 'account', account, callback)\n}\n\n/**\n * Creates the Attachable in QuickBooks\n *\n * @param  {object} attachable - The unsaved attachable, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Attachable\n */\nQuickBooks.prototype.createAttachable = function(attachable, callback) {\n  module.create(this, 'attachable', attachable, callback)\n}\n\n/**\n * Creates the Bill in QuickBooks\n *\n * @param  {object} bill - The unsaved bill, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Bill\n */\nQuickBooks.prototype.createBill = function(bill, callback) {\n  module.create(this, 'bill', bill, callback)\n}\n\n/**\n * Creates the BillPayment in QuickBooks\n *\n * @param  {object} billPayment - The unsaved billPayment, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent BillPayment\n */\nQuickBooks.prototype.createBillPayment = function(billPayment, callback) {\n  module.create(this, 'billPayment', billPayment, callback)\n}\n\n/**\n * Creates the Class in QuickBooks\n *\n * @param  {object} class - The unsaved class, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Class\n */\nQuickBooks.prototype.createClass = function(klass, callback) {\n  module.create(this, 'class', klass, callback)\n}\n\n/**\n * Creates the CreditMemo in QuickBooks\n *\n * @param  {object} creditMemo - The unsaved creditMemo, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent CreditMemo\n */\nQuickBooks.prototype.createCreditMemo = function(creditMemo, callback) {\n  module.create(this, 'creditMemo', creditMemo, callback)\n}\n\n/**\n * Creates the Customer in QuickBooks\n *\n * @param  {object} customer - The unsaved customer, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Customer\n */\nQuickBooks.prototype.createCustomer = function(customer, callback) {\n  module.create(this, 'customer', customer, callback)\n}\n\n/**\n * Creates the Department in QuickBooks\n *\n * @param  {object} department - The unsaved department, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Department\n */\nQuickBooks.prototype.createDepartment = function(department, callback) {\n  module.create(this, 'department', department, callback)\n}\n\n/**\n * Creates the Deposit in QuickBooks\n *\n * @param  {object} deposit - The unsaved Deposit, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Deposit\n */\nQuickBooks.prototype.createDeposit = function(deposit, callback) {\n  module.create(this, 'deposit', deposit, callback)\n}\n\n/**\n * Creates the Employee in QuickBooks\n *\n * @param  {object} employee - The unsaved employee, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Employee\n */\nQuickBooks.prototype.createEmployee = function(employee, callback) {\n  module.create(this, 'employee', employee, callback)\n}\n\n/**\n * Creates the Estimate in QuickBooks\n *\n * @param  {object} estimate - The unsaved estimate, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Estimate\n */\nQuickBooks.prototype.createEstimate = function(estimate, callback) {\n  module.create(this, 'estimate', estimate, callback)\n}\n\n/**\n * Creates the Invoice in QuickBooks\n *\n * @param  {object} invoice - The unsaved invoice, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */\nQuickBooks.prototype.createInvoice = function(invoice, callback) {\n  module.create(this, 'invoice', invoice, callback)\n}\n\n/**\n * Creates the Item in QuickBooks\n *\n * @param  {object} item - The unsaved item, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Item\n */\nQuickBooks.prototype.createItem = function(item, callback) {\n  module.create(this, 'item', item, callback)\n}\n\n/**\n * Creates the JournalEntry in QuickBooks\n *\n * @param  {object} journalEntry - The unsaved journalEntry, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalEntry\n */\nQuickBooks.prototype.createJournalEntry = function(journalEntry, callback) {\n  module.create(this, 'journalEntry', journalEntry, callback)\n}\n\n/**\n * Creates the Payment in QuickBooks\n *\n * @param  {object} payment - The unsaved payment, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */\nQuickBooks.prototype.createPayment = function(payment, callback) {\n  module.create(this, 'payment', payment, callback)\n}\n\n/**\n * Creates the PaymentMethod in QuickBooks\n *\n * @param  {object} paymentMethod - The unsaved paymentMethod, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent PaymentMethod\n */\nQuickBooks.prototype.createPaymentMethod = function(paymentMethod, callback) {\n  module.create(this, 'paymentMethod', paymentMethod, callback)\n}\n\n/**\n * Creates the Purchase in QuickBooks\n *\n * @param  {object} purchase - The unsaved purchase, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Purchase\n */\nQuickBooks.prototype.createPurchase = function(purchase, callback) {\n  module.create(this, 'purchase', purchase, callback)\n}\n\n/**\n * Creates the PurchaseOrder in QuickBooks\n *\n * @param  {object} purchaseOrder - The unsaved purchaseOrder, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent PurchaseOrder\n */\nQuickBooks.prototype.createPurchaseOrder = function(purchaseOrder, callback) {\n  module.create(this, 'purchaseOrder', purchaseOrder, callback)\n}\n\n/**\n * Creates the RefundReceipt in QuickBooks\n *\n * @param  {object} refundReceipt - The unsaved refundReceipt, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent RefundReceipt\n */\nQuickBooks.prototype.createRefundReceipt = function(refundReceipt, callback) {\n  module.create(this, 'refundReceipt', refundReceipt, callback)\n}\n\n/**\n * Creates the SalesReceipt in QuickBooks\n *\n * @param  {object} salesReceipt - The unsaved salesReceipt, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent SalesReceipt\n */\nQuickBooks.prototype.createSalesReceipt = function(salesReceipt, callback) {\n  module.create(this, 'salesReceipt', salesReceipt, callback)\n}\n\n/**\n * Creates the TaxAgency in QuickBooks\n *\n * @param  {object} taxAgency - The unsaved taxAgency, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxAgency\n */\nQuickBooks.prototype.createTaxAgency = function(taxAgency, callback) {\n  module.create(this, 'taxAgency', taxAgency, callback)\n}\n\n/**\n * Creates the TaxService in QuickBooks\n *\n * @param  {object} taxService - The unsaved taxService, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxService\n */\nQuickBooks.prototype.createTaxService = function(taxService, callback) {\n  module.create(this, 'taxService/taxcode', taxService, callback)\n}\n\n/**\n * Creates the Term in QuickBooks\n *\n * @param  {object} term - The unsaved term, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Term\n */\nQuickBooks.prototype.createTerm = function(term, callback) {\n  module.create(this, 'term', term, callback)\n}\n\n/**\n * Creates the TimeActivity in QuickBooks\n *\n * @param  {object} timeActivity - The unsaved timeActivity, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent TimeActivity\n */\nQuickBooks.prototype.createTimeActivity = function(timeActivity, callback) {\n  module.create(this, 'timeActivity', timeActivity, callback)\n}\n\n/**\n * Creates the Transfer in QuickBooks\n *\n * @param  {object} transfer - The unsaved Transfer, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Transfer\n */\nQuickBooks.prototype.createTransfer = function(transfer, callback) {\n  module.create(this, 'transfer', transfer, callback)\n}\n\n/**\n * Creates the Vendor in QuickBooks\n *\n * @param  {object} vendor - The unsaved vendor, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Vendor\n */\nQuickBooks.prototype.createVendor = function(vendor, callback) {\n  module.create(this, 'vendor', vendor, callback)\n}\n\n/**\n * Creates the VendorCredit in QuickBooks\n *\n * @param  {object} vendorCredit - The unsaved vendorCredit, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent VendorCredit\n */\nQuickBooks.prototype.createVendorCredit = function(vendorCredit, callback) {\n  module.create(this, 'vendorCredit', vendorCredit, callback)\n}\n\n\n\n/**\n * Retrieves the Account from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Account\n * @param  {function} callback - Callback function which is called with any error and the persistent Account\n */\nQuickBooks.prototype.getAccount = function(id, callback) {\n  module.read(this, 'account', id, callback)\n}\n\n/**\n * Retrieves the Attachable from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Attachable\n * @param  {function} callback - Callback function which is called with any error and the persistent Attachable\n */\nQuickBooks.prototype.getAttachable = function(id, callback) {\n  module.read(this, 'attachable', id, callback)\n}\n\n/**\n * Retrieves the Bill from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Bill\n * @param  {function} callback - Callback function which is called with any error and the persistent Bill\n */\nQuickBooks.prototype.getBill = function(id, callback) {\n  module.read(this, 'bill', id, callback)\n}\n\n/**\n * Retrieves the BillPayment from QuickBooks\n *\n * @param  {string} Id - The Id of persistent BillPayment\n * @param  {function} callback - Callback function which is called with any error and the persistent BillPayment\n */\nQuickBooks.prototype.getBillPayment = function(id, callback) {\n  module.read(this, 'billPayment', id, callback)\n}\n\n/**\n * Retrieves the Class from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Class\n * @param  {function} callback - Callback function which is called with any error and the persistent Class\n */\nQuickBooks.prototype.getClass = function(id, callback) {\n  module.read(this, 'class', id, callback)\n}\n\n/**\n * Retrieves the CompanyInfo from QuickBooks\n *\n * @param  {string} Id - The Id of persistent CompanyInfo\n * @param  {function} callback - Callback function which is called with any error and the persistent CompanyInfo\n */\nQuickBooks.prototype.getCompanyInfo = function(id, callback) {\n  module.read(this, 'companyInfo', id, callback)\n}\n\n/**\n * Retrieves the CreditMemo from QuickBooks\n *\n * @param  {string} Id - The Id of persistent CreditMemo\n * @param  {function} callback - Callback function which is called with any error and the persistent CreditMemo\n */\nQuickBooks.prototype.getCreditMemo = function(id, callback) {\n  module.read(this, 'creditMemo', id, callback)\n}\n\n/**\n * Retrieves the Customer from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Customer\n * @param  {function} callback - Callback function which is called with any error and the persistent Customer\n */\nQuickBooks.prototype.getCustomer = function(id, callback) {\n  module.read(this, 'customer', id, callback)\n}\n\n/**\n * Retrieves the Department from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Department\n * @param  {function} callback - Callback function which is called with any error and the persistent Department\n */\nQuickBooks.prototype.getDepartment = function(id, callback) {\n  module.read(this, 'department', id, callback)\n}\n\n/**\n * Retrieves the Deposit from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Deposit\n * @param  {function} callback - Callback function which is called with any error and the persistent Deposit\n */\nQuickBooks.prototype.getDeposit = function(id, callback) {\n  module.read(this, 'deposit', id, callback)\n}\n\n/**\n * Retrieves the Employee from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Employee\n * @param  {function} callback - Callback function which is called with any error and the persistent Employee\n */\nQuickBooks.prototype.getEmployee = function(id, callback) {\n  module.read(this, 'employee', id, callback)\n}\n\n/**\n * Retrieves the Estimate from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Estimate\n * @param  {function} callback - Callback function which is called with any error and the persistent Estimate\n */\nQuickBooks.prototype.getEstimate = function(id, callback) {\n  module.read(this, 'estimate', id, callback)\n}\n\n/**\n * Retrieves an ExchangeRate from QuickBooks\n *\n * @param  {object} options - An object with options including the required `sourcecurrencycode` parameter and optional `asofdate` parameter.\n * @param  {function} callback - Callback function which is called with any error and the ExchangeRate\n */\nQuickBooks.prototype.getExchangeRate = function(options, callback) {\n  var url = \"/exchangerate\";\n  module.request(this, 'get', {url: url, qs: options}, null, callback)\n}\n\n/**\n * Emails the Estimate PDF from QuickBooks to the address supplied in Estimate.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent Estimate\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in Estimate.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the Estimate PDF\n */\nQuickBooks.prototype.sendEstimatePdf = function(id, sendTo, callback) {\n  var path = '/estimate/' + id + '/send'\n  callback = _.isFunction(sendTo) ? sendTo : callback\n  if (sendTo && ! _.isFunction(sendTo)) {\n    path += '?sendTo=' + sendTo\n  }\n  module.request(this, 'post', {url: path}, null, module.unwrap(callback, 'Estimate'))\n}\n\n/**\n * Retrieves the Invoice from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Invoice\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */\nQuickBooks.prototype.getInvoice = function(id, callback) {\n  module.read(this, 'invoice', id, callback)\n}\n\n/**\n * Retrieves the Invoice PDF from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Invoice\n * @param  {function} callback - Callback function which is called with any error and the Invoice PDF\n */\nQuickBooks.prototype.getInvoicePdf = function(id, callback) {\n  module.read(this, 'Invoice', id + '/pdf', callback)\n}\n\n/**\n * Emails the Invoice PDF from QuickBooks to the address supplied in Invoice.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent Invoice\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in Invoice.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the Invoice PDF\n */\nQuickBooks.prototype.sendInvoicePdf = function(id, sendTo, callback) {\n  var path = '/invoice/' + id + '/send'\n  callback = _.isFunction(sendTo) ? sendTo : callback\n  if (sendTo && ! _.isFunction(sendTo)) {\n    path += '?sendTo=' + sendTo\n  }\n  module.request(this, 'post', {url: path}, null, module.unwrap(callback, 'Invoice'))\n}\n\n/**\n * Retrieves the Item from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Item\n * @param  {function} callback - Callback function which is called with any error and the persistent Item\n */\nQuickBooks.prototype.getItem = function(id, callback) {\n  module.read(this, 'item', id, callback)\n}\n\n/**\n * Retrieves the JournalEntry from QuickBooks\n *\n * @param  {string} Id - The Id of persistent JournalEntry\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalEntry\n */\nQuickBooks.prototype.getJournalEntry = function(id, callback) {\n  module.read(this, 'journalEntry', id, callback)\n}\n\n/**\n * Retrieves the Payment from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Payment\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */\nQuickBooks.prototype.getPayment = function(id, callback) {\n  module.read(this, 'payment', id, callback)\n}\n\n/**\n * Retrieves the PaymentMethod from QuickBooks\n *\n * @param  {string} Id - The Id of persistent PaymentMethod\n * @param  {function} callback - Callback function which is called with any error and the persistent PaymentMethod\n */\nQuickBooks.prototype.getPaymentMethod = function(id, callback) {\n  module.read(this, 'paymentMethod', id, callback)\n}\n\n/**\n * Retrieves the Preferences from QuickBooks\n *\n * @param  {function} callback - Callback function which is called with any error and the persistent Preferences\n */\nQuickBooks.prototype.getPreferences = function(callback) {\n  module.read(this, 'preferences', null, callback)\n}\n\n/**\n * Retrieves the Purchase from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Purchase\n * @param  {function} callback - Callback function which is called with any error and the persistent Purchase\n */\nQuickBooks.prototype.getPurchase = function(id, callback) {\n  module.read(this, 'purchase', id, callback)\n}\n\n/**\n * Retrieves the PurchaseOrder from QuickBooks\n *\n * @param  {string} Id - The Id of persistent PurchaseOrder\n * @param  {function} callback - Callback function which is called with any error and the persistent PurchaseOrder\n */\nQuickBooks.prototype.getPurchaseOrder = function(id, callback) {\n  module.read(this, 'purchaseOrder', id, callback)\n}\n\n/**\n * Retrieves the RefundReceipt from QuickBooks\n *\n * @param  {string} Id - The Id of persistent RefundReceipt\n * @param  {function} callback - Callback function which is called with any error and the persistent RefundReceipt\n */\nQuickBooks.prototype.getRefundReceipt = function(id, callback) {\n  module.read(this, 'refundReceipt', id, callback)\n}\n\n/**\n * Retrieves the Reports from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Reports\n * @param  {function} callback - Callback function which is called with any error and the persistent Reports\n */\nQuickBooks.prototype.getReports = function(id, callback) {\n  module.read(this, 'reports', id, callback)\n}\n\n/**\n * Retrieves the SalesReceipt from QuickBooks\n *\n * @param  {string} Id - The Id of persistent SalesReceipt\n * @param  {function} callback - Callback function which is called with any error and the persistent SalesReceipt\n */\nQuickBooks.prototype.getSalesReceipt = function(id, callback) {\n  module.read(this, 'salesReceipt', id, callback)\n}\n\n/**\n * Retrieves the SalesReceipt PDF from QuickBooks\n *\n * @param  {string} Id - The Id of persistent SalesReceipt\n * @param  {function} callback - Callback function which is called with any error and the SalesReceipt PDF\n */\nQuickBooks.prototype.getSalesReceiptPdf = function(id, callback) {\n  module.read(this, 'salesReceipt', id + '/pdf', callback)\n}\n\n/**\n * Emails the SalesReceipt PDF from QuickBooks to the address supplied in SalesReceipt.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent SalesReceipt\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in SalesReceipt.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the SalesReceipt PDF\n */\nQuickBooks.prototype.sendSalesReceiptPdf = function(id, sendTo, callback) {\n  var path = '/salesreceipt/' + id + '/send'\n  callback = _.isFunction(sendTo) ? sendTo : callback\n  if (sendTo && ! _.isFunction(sendTo)) {\n    path += '?sendTo=' + sendTo\n  }\n  module.request(this, 'post', {url: path}, null, module.unwrap(callback, 'SalesReceipt'))\n}\n\n/**\n * Retrieves the TaxAgency from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TaxAgency\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxAgency\n */\nQuickBooks.prototype.getTaxAgency = function(id, callback) {\n  module.read(this, 'taxAgency', id, callback)\n}\n\n/**\n * Retrieves the TaxCode from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TaxCode\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxCode\n */\nQuickBooks.prototype.getTaxCode = function(id, callback) {\n  module.read(this, 'taxCode', id, callback)\n}\n\n/**\n * Retrieves the TaxRate from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TaxRate\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxRate\n */\nQuickBooks.prototype.getTaxRate = function(id, callback) {\n  module.read(this, 'taxRate', id, callback)\n}\n\n/**\n * Retrieves the Term from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Term\n * @param  {function} callback - Callback function which is called with any error and the persistent Term\n */\nQuickBooks.prototype.getTerm = function(id, callback) {\n  module.read(this, 'term', id, callback)\n}\n\n/**\n * Retrieves the TimeActivity from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TimeActivity\n * @param  {function} callback - Callback function which is called with any error and the persistent TimeActivity\n */\nQuickBooks.prototype.getTimeActivity = function(id, callback) {\n  module.read(this, 'timeActivity', id, callback)\n}\n\n/**\n * Retrieves the Transfer from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Term\n * @param  {function} callback - Callback function which is called with any error and the persistent Transfer\n */\nQuickBooks.prototype.getTransfer = function(id, callback) {\n  module.read(this, 'transfer', id, callback)\n}\n\n/**\n * Retrieves the Vendor from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Vendor\n * @param  {function} callback - Callback function which is called with any error and the persistent Vendor\n */\nQuickBooks.prototype.getVendor = function(id, callback) {\n  module.read(this, 'vendor', id, callback)\n}\n\n/**\n * Retrieves the VendorCredit from QuickBooks\n *\n * @param  {string} Id - The Id of persistent VendorCredit\n * @param  {function} callback - Callback function which is called with any error and the persistent VendorCredit\n */\nQuickBooks.prototype.getVendorCredit = function(id, callback) {\n  module.read(this, 'vendorCredit', id, callback)\n}\n\n\n\n/**\n * Updates QuickBooks version of Account\n *\n * @param  {object} account - The persistent Account, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Account\n */\nQuickBooks.prototype.updateAccount = function(account, callback) {\n  module.update(this, 'account', account, callback)\n}\n\n/**\n * Updates QuickBooks version of Attachable\n *\n * @param  {object} attachable - The persistent Attachable, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Attachable\n */\nQuickBooks.prototype.updateAttachable = function(attachable, callback) {\n  module.update(this, 'attachable', attachable, callback)\n}\n\n/**\n * Updates QuickBooks version of Bill\n *\n * @param  {object} bill - The persistent Bill, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Bill\n */\nQuickBooks.prototype.updateBill = function(bill, callback) {\n  module.update(this, 'bill', bill, callback)\n}\n\n/**\n * Updates QuickBooks version of BillPayment\n *\n * @param  {object} billPayment - The persistent BillPayment, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent BillPayment\n */\nQuickBooks.prototype.updateBillPayment = function(billPayment, callback) {\n  module.update(this, 'billPayment', billPayment, callback)\n}\n\n/**\n * Updates QuickBooks version of Class\n *\n * @param  {object} class - The persistent Class, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Class\n */\nQuickBooks.prototype.updateClass = function(klass, callback) {\n  module.update(this, 'class', klass, callback)\n}\n\n/**\n * Updates QuickBooks version of CompanyInfo\n *\n * @param  {object} companyInfo - The persistent CompanyInfo, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent CompanyInfo\n */\nQuickBooks.prototype.updateCompanyInfo = function(companyInfo, callback) {\n  module.update(this, 'companyInfo', companyInfo, callback)\n}\n\n/**\n * Updates QuickBooks version of CreditMemo\n *\n * @param  {object} creditMemo - The persistent CreditMemo, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent CreditMemo\n */\nQuickBooks.prototype.updateCreditMemo = function(creditMemo, callback) {\n  module.update(this, 'creditMemo', creditMemo, callback)\n}\n\n/**\n * Updates QuickBooks version of Customer\n *\n * @param  {object} customer - The persistent Customer, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Customer\n */\nQuickBooks.prototype.updateCustomer = function(customer, callback) {\n  module.update(this, 'customer', customer, callback)\n}\n\n/**\n * Updates QuickBooks version of Department\n *\n * @param  {object} department - The persistent Department, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Department\n */\nQuickBooks.prototype.updateDepartment = function(department, callback) {\n  module.update(this, 'department', department, callback)\n}\n\n/**\n * Updates QuickBooks version of Deposit\n *\n * @param  {object} deposit - The persistent Deposit, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Deposit\n */\nQuickBooks.prototype.updateDeposit = function(deposit, callback) {\n  module.update(this, 'deposit', deposit, callback)\n}\n\n/**\n * Updates QuickBooks version of Employee\n *\n * @param  {object} employee - The persistent Employee, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Employee\n */\nQuickBooks.prototype.updateEmployee = function(employee, callback) {\n  module.update(this, 'employee', employee, callback)\n}\n\n/**\n * Updates QuickBooks version of Estimate\n *\n * @param  {object} estimate - The persistent Estimate, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Estimate\n */\nQuickBooks.prototype.updateEstimate = function(estimate, callback) {\n  module.update(this, 'estimate', estimate, callback)\n}\n\n/**\n * Updates QuickBooks version of Invoice\n *\n * @param  {object} invoice - The persistent Invoice, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */\nQuickBooks.prototype.updateInvoice = function(invoice, callback) {\n  module.update(this, 'invoice', invoice, callback)\n}\n\n/**\n * Updates QuickBooks version of Item\n *\n * @param  {object} item - The persistent Item, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Item\n */\nQuickBooks.prototype.updateItem = function(item, callback) {\n  module.update(this, 'item', item, callback)\n}\n\n/**\n * Updates QuickBooks version of JournalEntry\n *\n * @param  {object} journalEntry - The persistent JournalEntry, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalEntry\n */\nQuickBooks.prototype.updateJournalEntry = function(journalEntry, callback) {\n  module.update(this, 'journalEntry', journalEntry, callback)\n}\n\n/**\n * Updates QuickBooks version of Payment\n *\n * @param  {object} payment - The persistent Payment, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */\nQuickBooks.prototype.updatePayment = function(payment, callback) {\n  module.update(this, 'payment', payment, callback)\n}\n\n/**\n * Updates QuickBooks version of PaymentMethod\n *\n * @param  {object} paymentMethod - The persistent PaymentMethod, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent PaymentMethod\n */\nQuickBooks.prototype.updatePaymentMethod = function(paymentMethod, callback) {\n  module.update(this, 'paymentMethod', paymentMethod, callback)\n}\n\n/**\n * Updates QuickBooks version of Preferences\n *\n * @param  {object} preferences - The persistent Preferences, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Preferences\n */\nQuickBooks.prototype.updatePreferences = function(preferences, callback) {\n  module.update(this, 'preferences', preferences, callback)\n}\n\n/**\n * Updates QuickBooks version of Purchase\n *\n * @param  {object} purchase - The persistent Purchase, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Purchase\n */\nQuickBooks.prototype.updatePurchase = function(purchase, callback) {\n  module.update(this, 'purchase', purchase, callback)\n}\n\n/**\n * Updates QuickBooks version of PurchaseOrder\n *\n * @param  {object} purchaseOrder - The persistent PurchaseOrder, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent PurchaseOrder\n */\nQuickBooks.prototype.updatePurchaseOrder = function(purchaseOrder, callback) {\n  module.update(this, 'purchaseOrder', purchaseOrder, callback)\n}\n\n/**\n * Updates QuickBooks version of RefundReceipt\n *\n * @param  {object} refundReceipt - The persistent RefundReceipt, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent RefundReceipt\n */\nQuickBooks.prototype.updateRefundReceipt = function(refundReceipt, callback) {\n  module.update(this, 'refundReceipt', refundReceipt, callback)\n}\n\n/**\n * Updates QuickBooks version of SalesReceipt\n *\n * @param  {object} salesReceipt - The persistent SalesReceipt, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent SalesReceipt\n */\nQuickBooks.prototype.updateSalesReceipt = function(salesReceipt, callback) {\n  module.update(this, 'salesReceipt', salesReceipt, callback)\n}\n\n/**\n * Updates QuickBooks version of TaxAgency\n *\n * @param  {object} taxAgency - The persistent TaxAgency, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxAgency\n */\nQuickBooks.prototype.updateTaxAgency = function(taxAgency, callback) {\n  module.update(this, 'taxAgency', taxAgency, callback)\n}\n\n/**\n * Updates QuickBooks version of TaxCode\n *\n * @param  {object} taxCode - The persistent TaxCode, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxCode\n */\nQuickBooks.prototype.updateTaxCode = function(taxCode, callback) {\n  module.update(this, 'taxCode', taxCode, callback)\n}\n\n/**\n * Updates QuickBooks version of TaxRate\n *\n * @param  {object} taxRate - The persistent TaxRate, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxRate\n */\nQuickBooks.prototype.updateTaxRate = function(taxRate, callback) {\n  module.update(this, 'taxRate', taxRate, callback)\n}\n\n/**\n * Updates QuickBooks version of Term\n *\n * @param  {object} term - The persistent Term, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Term\n */\nQuickBooks.prototype.updateTerm = function(term, callback) {\n  module.update(this, 'term', term, callback)\n}\n\n/**\n * Updates QuickBooks version of TimeActivity\n *\n * @param  {object} timeActivity - The persistent TimeActivity, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TimeActivity\n */\nQuickBooks.prototype.updateTimeActivity = function(timeActivity, callback) {\n  module.update(this, 'timeActivity', timeActivity, callback)\n}\n\n/**\n * Updates QuickBooks version of Transfer\n *\n * @param  {object} Transfer - The persistent Transfer, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Transfer\n */\nQuickBooks.prototype.updateTransfer = function(transfer, callback) {\n  module.update(this, 'transfer', transfer, callback)\n}\n\n/**\n * Updates QuickBooks version of Vendor\n *\n * @param  {object} vendor - The persistent Vendor, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Vendor\n */\nQuickBooks.prototype.updateVendor = function(vendor, callback) {\n  module.update(this, 'vendor', vendor, callback)\n}\n\n/**\n * Updates QuickBooks version of VendorCredit\n *\n * @param  {object} vendorCredit - The persistent VendorCredit, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent VendorCredit\n */\nQuickBooks.prototype.updateVendorCredit = function(vendorCredit, callback) {\n  module.update(this, 'vendorCredit', vendorCredit, callback)\n}\n\n/**\n * Updates QuickBooks version of ExchangeRate\n *\n * @param  {object} exchangeRate - The persistent ExchangeRate, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent ExchangeRate\n */\nQuickBooks.prototype.updateExchangeRate = function(exchangeRate, callback) {\n  module.update(this, 'exchangerate', exchangeRate, callback)\n}\n\n\n/**\n * Deletes the Attachable from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Attachable to be deleted, or the Id of the Attachable, in which case an extra GET request will be issued to first retrieve the Attachable\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Attachable\n */\nQuickBooks.prototype.deleteAttachable = function(idOrEntity, callback) {\n  module.delete(this, 'attachable', idOrEntity, callback)\n}\n\n/**\n * Deletes the Bill from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Bill to be deleted, or the Id of the Bill, in which case an extra GET request will be issued to first retrieve the Bill\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Bill\n */\nQuickBooks.prototype.deleteBill = function(idOrEntity, callback) {\n  module.delete(this, 'bill', idOrEntity, callback)\n}\n\n/**\n * Deletes the BillPayment from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent BillPayment to be deleted, or the Id of the BillPayment, in which case an extra GET request will be issued to first retrieve the BillPayment\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent BillPayment\n */\nQuickBooks.prototype.deleteBillPayment = function(idOrEntity, callback) {\n  module.delete(this, 'billPayment', idOrEntity, callback)\n}\n\n/**\n * Deletes the CreditMemo from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent CreditMemo to be deleted, or the Id of the CreditMemo, in which case an extra GET request will be issued to first retrieve the CreditMemo\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent CreditMemo\n */\nQuickBooks.prototype.deleteCreditMemo = function(idOrEntity, callback) {\n  module.delete(this, 'creditMemo', idOrEntity, callback)\n}\n\n/**\n * Deletes the Deposit from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Deposit to be deleted, or the Id of the Deposit, in which case an extra GET request will be issued to first retrieve the Deposit\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Deposit\n */\nQuickBooks.prototype.deleteDeposit = function(idOrEntity, callback) {\n  module.delete(this, 'deposit', idOrEntity, callback)\n}\n\n/**\n * Deletes the Estimate from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Estimate to be deleted, or the Id of the Estimate, in which case an extra GET request will be issued to first retrieve the Estimate\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Estimate\n */\nQuickBooks.prototype.deleteEstimate = function(idOrEntity, callback) {\n  module.delete(this, 'estimate', idOrEntity, callback)\n}\n\n/**\n * Deletes the Invoice from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Invoice to be deleted, or the Id of the Invoice, in which case an extra GET request will be issued to first retrieve the Invoice\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Invoice\n */\nQuickBooks.prototype.deleteInvoice = function(idOrEntity, callback) {\n  module.delete(this, 'invoice', idOrEntity, callback)\n}\n\n/**\n * Deletes the JournalEntry from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent JournalEntry to be deleted, or the Id of the JournalEntry, in which case an extra GET request will be issued to first retrieve the JournalEntry\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent JournalEntry\n */\nQuickBooks.prototype.deleteJournalEntry = function(idOrEntity, callback) {\n  module.delete(this, 'journalEntry', idOrEntity, callback)\n}\n\n/**\n * Deletes the Payment from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Payment to be deleted, or the Id of the Payment, in which case an extra GET request will be issued to first retrieve the Payment\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Payment\n */\nQuickBooks.prototype.deletePayment = function(idOrEntity, callback) {\n  module.delete(this, 'payment', idOrEntity, callback)\n}\n\n/**\n * Deletes the Purchase from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Purchase to be deleted, or the Id of the Purchase, in which case an extra GET request will be issued to first retrieve the Purchase\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Purchase\n */\nQuickBooks.prototype.deletePurchase = function(idOrEntity, callback) {\n  module.delete(this, 'purchase', idOrEntity, callback)\n}\n\n/**\n * Deletes the PurchaseOrder from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent PurchaseOrder to be deleted, or the Id of the PurchaseOrder, in which case an extra GET request will be issued to first retrieve the PurchaseOrder\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent PurchaseOrder\n */\nQuickBooks.prototype.deletePurchaseOrder = function(idOrEntity, callback) {\n  module.delete(this, 'purchaseOrder', idOrEntity, callback)\n}\n\n/**\n * Deletes the RefundReceipt from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent RefundReceipt to be deleted, or the Id of the RefundReceipt, in which case an extra GET request will be issued to first retrieve the RefundReceipt\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent RefundReceipt\n */\nQuickBooks.prototype.deleteRefundReceipt = function(idOrEntity, callback) {\n  module.delete(this, 'refundReceipt', idOrEntity, callback)\n}\n\n/**\n * Deletes the SalesReceipt from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent SalesReceipt to be deleted, or the Id of the SalesReceipt, in which case an extra GET request will be issued to first retrieve the SalesReceipt\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent SalesReceipt\n */\nQuickBooks.prototype.deleteSalesReceipt = function(idOrEntity, callback) {\n  module.delete(this, 'salesReceipt', idOrEntity, callback)\n}\n\n/**\n * Deletes the TimeActivity from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent TimeActivity to be deleted, or the Id of the TimeActivity, in which case an extra GET request will be issued to first retrieve the TimeActivity\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent TimeActivity\n */\nQuickBooks.prototype.deleteTimeActivity = function(idOrEntity, callback) {\n  module.delete(this, 'timeActivity', idOrEntity, callback)\n}\n\n/**\n * Deletes the Transfer from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Transfer to be deleted, or the Id of the Transfer, in which case an extra GET request will be issued to first retrieve the Transfer\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Transfer\n */\nQuickBooks.prototype.deleteTransfer = function(idOrEntity, callback) {\n  module.delete(this, 'transfer', idOrEntity, callback)\n}\n\n/**\n * Deletes the VendorCredit from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent VendorCredit to be deleted, or the Id of the VendorCredit, in which case an extra GET request will be issued to first retrieve the VendorCredit\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent VendorCredit\n */\nQuickBooks.prototype.deleteVendorCredit = function(idOrEntity, callback) {\n  module.delete(this, 'vendorCredit', idOrEntity, callback)\n}\n\n\n\n/**\n * Finds all Accounts in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Account\n */\nQuickBooks.prototype.findAccounts = function(criteria, callback) {\n  module.query(this, 'account', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Attachables in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Attachable\n */\nQuickBooks.prototype.findAttachables = function(criteria, callback) {\n  module.query(this, 'attachable', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Bills in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Bill\n */\nQuickBooks.prototype.findBills = function(criteria, callback) {\n  module.query(this, 'bill', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all BillPayments in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of BillPayment\n */\nQuickBooks.prototype.findBillPayments = function(criteria, callback) {\n  module.query(this, 'billPayment', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Budgets in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Budget\n */\nQuickBooks.prototype.findBudgets = function(criteria, callback) {\n  module.query(this, 'budget', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Classs in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Class\n */\nQuickBooks.prototype.findClasses = function(criteria, callback) {\n  module.query(this, 'class', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all CompanyInfos in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of CompanyInfo\n */\nQuickBooks.prototype.findCompanyInfos = function(criteria, callback) {\n  module.query(this, 'companyInfo', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all CreditMemos in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of CreditMemo\n */\nQuickBooks.prototype.findCreditMemos = function(criteria, callback) {\n  module.query(this, 'creditMemo', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Customers in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Customer\n */\nQuickBooks.prototype.findCustomers = function(criteria, callback) {\n  module.query(this, 'customer', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Departments in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Department\n */\nQuickBooks.prototype.findDepartments = function(criteria, callback) {\n  module.query(this, 'department', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Deposits in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Deposit\n */\nQuickBooks.prototype.findDeposits = function(criteria, callback) {\n  module.query(this, 'deposit', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Employees in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Employee\n */\nQuickBooks.prototype.findEmployees = function(criteria, callback) {\n  module.query(this, 'employee', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Estimates in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Estimate\n */\nQuickBooks.prototype.findEstimates = function(criteria, callback) {\n  module.query(this, 'estimate', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Invoices in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Invoice\n */\nQuickBooks.prototype.findInvoices = function(criteria, callback) {\n  module.query(this, 'invoice', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Items in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Item\n */\nQuickBooks.prototype.findItems = function(criteria, callback) {\n  module.query(this, 'item', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all JournalEntrys in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of JournalEntry\n */\nQuickBooks.prototype.findJournalEntries = function(criteria, callback) {\n  module.query(this, 'journalEntry', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Payments in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Payment\n */\nQuickBooks.prototype.findPayments = function(criteria, callback) {\n  module.query(this, 'payment', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all PaymentMethods in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of PaymentMethod\n */\nQuickBooks.prototype.findPaymentMethods = function(criteria, callback) {\n  module.query(this, 'paymentMethod', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Preferencess in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Preferences\n */\nQuickBooks.prototype.findPreferenceses = function(criteria, callback) {\n  module.query(this, 'preferences', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Purchases in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Purchase\n */\nQuickBooks.prototype.findPurchases = function(criteria, callback) {\n  module.query(this, 'purchase', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all PurchaseOrders in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of PurchaseOrder\n */\nQuickBooks.prototype.findPurchaseOrders = function(criteria, callback) {\n  module.query(this, 'purchaseOrder', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all RefundReceipts in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of RefundReceipt\n */\nQuickBooks.prototype.findRefundReceipts = function(criteria, callback) {\n  module.query(this, 'refundReceipt', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all SalesReceipts in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of SalesReceipt\n */\nQuickBooks.prototype.findSalesReceipts = function(criteria, callback) {\n  module.query(this, 'salesReceipt', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all TaxAgencys in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TaxAgency\n */\nQuickBooks.prototype.findTaxAgencies = function(criteria, callback) {\n  module.query(this, 'taxAgency', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all TaxCodes in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TaxCode\n */\nQuickBooks.prototype.findTaxCodes = function(criteria, callback) {\n  module.query(this, 'taxCode', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all TaxRates in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TaxRate\n */\nQuickBooks.prototype.findTaxRates = function(criteria, callback) {\n  module.query(this, 'taxRate', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Terms in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Term\n */\nQuickBooks.prototype.findTerms = function(criteria, callback) {\n  module.query(this, 'term', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all TimeActivitys in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TimeActivity\n */\nQuickBooks.prototype.findTimeActivities = function(criteria, callback) {\n  module.query(this, 'timeActivity', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Transfers in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Transfer\n */\nQuickBooks.prototype.findTransfers = function(criteria, callback) {\n  module.query(this, 'transfer', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all Vendors in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Vendor\n */\nQuickBooks.prototype.findVendors = function(criteria, callback) {\n  module.query(this, 'vendor', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all VendorCredits in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of VendorCredit\n */\nQuickBooks.prototype.findVendorCredits = function(criteria, callback) {\n  module.query(this, 'vendorCredit', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n/**\n * Finds all ExchangeRates in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of ExchangeRates\n */\nQuickBooks.prototype.findExchangeRates = function(criteria, callback) {\n  module.query(this, 'exchangerate', criteria).then(function(data) {\n    (callback || criteria)(null, data)\n  }).catch(function(err) {\n    (callback || criteria)(err, err)\n  })\n}\n\n\n/**\n * Retrieves the BalanceSheet Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the BalanceSheet Report\n */\nQuickBooks.prototype.reportBalanceSheet = function(options, callback) {\n  module.report(this, 'BalanceSheet', options, callback)\n}\n\n/**\n * Retrieves the ProfitAndLoss Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ProfitAndLoss Report\n */\nQuickBooks.prototype.reportProfitAndLoss = function(options, callback) {\n  module.report(this, 'ProfitAndLoss', options, callback)\n}\n\n/**\n * Retrieves the ProfitAndLossDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ProfitAndLossDetail Report\n */\nQuickBooks.prototype.reportProfitAndLossDetail = function(options, callback) {\n  module.report(this, 'ProfitAndLossDetail', options, callback)\n}\n\n/**\n * Retrieves the TrialBalance Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TrialBalance Report\n */\nQuickBooks.prototype.reportTrialBalance = function(options, callback) {\n  module.report(this, 'TrialBalance', options, callback)\n}\n\n/**\n * Retrieves the CashFlow Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CashFlow Report\n */\nQuickBooks.prototype.reportCashFlow = function(options, callback) {\n  module.report(this, 'CashFlow', options, callback)\n}\n\n/**\n * Retrieves the InventoryValuationSummary Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the InventoryValuationSummary Report\n */\nQuickBooks.prototype.reportInventoryValuationSummary = function(options, callback) {\n  module.report(this, 'InventoryValuationSummary', options, callback)\n}\n\n/**\n * Retrieves the CustomerSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerSales Report\n */\nQuickBooks.prototype.reportCustomerSales = function(options, callback) {\n  module.report(this, 'CustomerSales', options, callback)\n}\n\n/**\n * Retrieves the ItemSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ItemSales Report\n */\nQuickBooks.prototype.reportItemSales = function(options, callback) {\n  module.report(this, 'ItemSales', options, callback)\n}\n\n/**\n * Retrieves the CustomerIncome Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerIncome Report\n */\nQuickBooks.prototype.reportCustomerIncome = function(options, callback) {\n  module.report(this, 'CustomerIncome', options, callback)\n}\n\n/**\n * Retrieves the CustomerBalance Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerBalance Report\n */\nQuickBooks.prototype.reportCustomerBalance = function(options, callback) {\n  module.report(this, 'CustomerBalance', options, callback)\n}\n\n/**\n * Retrieves the CustomerBalanceDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerBalanceDetail Report\n */\nQuickBooks.prototype.reportCustomerBalanceDetail = function(options, callback) {\n  module.report(this, 'CustomerBalanceDetail', options, callback)\n}\n\n/**\n * Retrieves the AgedReceivables Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedReceivables Report\n */\nQuickBooks.prototype.reportAgedReceivables = function(options, callback) {\n  module.report(this, 'AgedReceivables', options, callback)\n}\n\n/**\n * Retrieves the AgedReceivableDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedReceivableDetail Report\n */\nQuickBooks.prototype.reportAgedReceivableDetail = function(options, callback) {\n  module.report(this, 'AgedReceivableDetail', options, callback)\n}\n\n/**\n * Retrieves the VendorBalance Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the VendorBalance Report\n */\nQuickBooks.prototype.reportVendorBalance = function(options, callback) {\n  module.report(this, 'VendorBalance', options, callback)\n}\n\n/**\n * Retrieves the VendorBalanceDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the VendorBalanceDetail Report\n */\nQuickBooks.prototype.reportVendorBalanceDetail = function(options, callback) {\n  module.report(this, 'VendorBalanceDetail', options, callback)\n}\n\n/**\n * Retrieves the AgedPayables Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedPayables Report\n */\nQuickBooks.prototype.reportAgedPayables = function(options, callback) {\n  module.report(this, 'AgedPayables', options, callback)\n}\n\n/**\n * Retrieves the AgedPayableDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedPayableDetail Report\n */\nQuickBooks.prototype.reportAgedPayableDetail = function(options, callback) {\n  module.report(this, 'AgedPayableDetail', options, callback)\n}\n\n/**\n * Retrieves the VendorExpenses Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the VendorExpenses Report\n */\nQuickBooks.prototype.reportVendorExpenses = function(options, callback) {\n  module.report(this, 'VendorExpenses', options, callback)\n}\n\n/**\n * Retrieves the TransactionList Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TransactionList Report\n */\nQuickBooks.prototype.reportTransactionList = function(options, callback) {\n  module.report(this, 'TransactionList', options, callback)\n}\n\n/**\n * Retrieves the GeneralLedgerDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the GeneralLedgerDetail Report\n */\nQuickBooks.prototype.reportGeneralLedgerDetail = function(options, callback) {\n  module.report(this, 'GeneralLedger', options, callback)\n}\n\n/**\n * Retrieves the TaxSummary Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TaxSummary Report\n */\nQuickBooks.prototype.reportTaxSummary = function(options, callback) {\n  module.report(this, 'TaxSummary', options, callback)\n}\n\n/**\n * Retrieves the DepartmentSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the DepartmentSales Report\n */\nQuickBooks.prototype.reportDepartmentSales = function(options, callback) {\n  module.report(this, 'DepartmentSales', options, callback)\n}\n\n/**\n * Retrieves the ClassSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ClassSales Report\n */\nQuickBooks.prototype.reportClassSales = function(options, callback) {\n  module.report(this, 'ClassSales', options, callback)\n}\n\n/**\n * Retrieves the AccountListDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AccountListDetail Report\n */\nQuickBooks.prototype.reportAccountListDetail = function(options, callback) {\n  module.report(this, 'AccountList', options, callback)\n}\n\nmodule.request = function(context, verb, options, entity, callback) {\n  var url = context.endpoint + context.realmId + options.url\n  if (options.url === QuickBooks.RECONNECT_URL) {\n    url = options.url\n  }\n  var opts = {\n    url:     url,\n    qs:      options.qs || {},\n    headers: options.headers || {},\n    oauth:   module.oauth(context),\n    json:    true\n  }\n  opts.qs.minorversion = opts.qs.minorversion || 4\n  opts.headers['User-Agent'] = 'node-quickbooks: version ' + version\n  opts.headers['Request-Id'] = uuid.v1()\n  if (options.url.match(/pdf$/)) {\n    opts.headers['accept'] = 'application/pdf'\n    opts.encoding = null\n  }\n  if (entity !== null) {\n    opts.body = entity\n  }\n  if (options.formData) {\n    opts.formData = options.formData\n  }\n  if ('production' !== process.env.NODE_ENV && context.debug) {\n    debug(request)\n  }\n  request[verb].call(context, opts, function (err, res, body) {\n    if ('production' !== process.env.NODE_ENV && context.debug) {\n      console.log('invoking endpoint: ' + url)\n      console.log(entity || '')\n      console.log(JSON.stringify(body, null, 2));\n    }\n    if (callback) {\n      if (err ||\n          res.statusCode >= 300 ||\n          (_.isObject(body) && body.Fault && body.Fault.Error && body.Fault.Error.length) ||\n          (_.isString(body) && !_.isEmpty(body) && body.indexOf('<') === 0)) {\n        callback(err || body, body)\n      } else {\n        callback(null, body)\n      }\n    }\n  })\n}\n\nQuickBooks.prototype.reconnect = function(callback) {\n  var url = QuickBooks.RECONNECT_URL\n  module.request(this, 'get', {url: url}, null, callback)\n}\n\n// **********************  CRUD Api **********************\nmodule.create = function(context, entityName, entity, callback) {\n  var url = '/' + entityName.toLowerCase()\n  module.request(context, 'post', {url: url}, entity, module.unwrap(callback, entityName))\n}\n\nmodule.read = function(context, entityName, id, callback) {\n  var url = '/' + entityName.toLowerCase()\n  if (id) url = url + '/' + id\n  module.request(context, 'get', {url: url}, null, module.unwrap(callback, entityName))\n}\n\nmodule.update = function(context, entityName, entity, callback) {\n  if (_.isUndefined(entity.Id) ||\n      _.isEmpty(entity.Id + '') ||\n      _.isUndefined(entity.SyncToken) ||\n      _.isEmpty(entity.SyncToken + '')) {\n    if (entityName !== 'exchangerate') {\n      throw new Error(entityName + ' must contain Id and SyncToken fields: ' +\n          util.inspect(entity, {showHidden: false, depth: null}))\n    }\n  }\n  if (! entity.hasOwnProperty('sparse')) {\n    entity.sparse = true\n  }\n  var url = '/' + entityName.toLowerCase() + '?operation=update'\n  var opts = {url: url}\n  if (entity.void && entity.void.toString() === 'true') {\n    opts.qs = { include: 'void' }\n    delete entity.void\n  }\n  module.request(context, 'post', opts, entity, module.unwrap(callback, entityName))\n}\n\nmodule.delete = function(context, entityName, idOrEntity, callback) {\n  var url = '/' + entityName.toLowerCase() + '?operation=delete'\n  callback = callback || function() {}\n  if (_.isObject(idOrEntity)) {\n    module.request(context, 'post', {url: url}, idOrEntity, callback)\n  } else {\n    module.read(context, entityName, idOrEntity, function(err, entity) {\n      if (err) {\n        callback(err)\n      } else {\n        module.request(context, 'post', {url: url}, entity, callback)\n      }\n    })\n  }\n}\n\n// **********************  Query Api **********************\nmodule.requestPromise = Promise.promisify(module.request)\n\nmodule.query = function(context, entity, criteria) {\n  var url = '/query?query@@select * from ' + entity\n  var count = function(obj) {\n    for (var p in obj) {\n      if (obj[p] && p.toLowerCase() === 'count') {\n        url = url.replace('select \\* from', 'select count(*) from')\n        delete obj[p]\n      }\n    }\n  }\n  count(criteria)\n  if (_.isArray(criteria)) {\n    for (var i = 0; i < criteria.length; i++) {\n      if (_.isObject(criteria[i])) {\n        var j = Object.keys(criteria[i]).length\n        count(criteria[i])\n        if (j !== Object.keys(criteria[i]).length) {\n          criteria.splice(i, i + 1)\n        }\n      }\n    }\n  }\n\n  var fetchAll = false, limit = 1000, offset = 1\n  if (_.isArray(criteria)) {\n    var lmt = _.find(criteria, function(obj) {\n      return obj.field && obj.field === 'limit'\n    })\n    if (lmt) limit = lmt.value\n    var ofs = _.find(criteria, function(obj) {\n      return obj.field && obj.field === 'offset'\n    })\n    if (! ofs) {\n      criteria.push({field: 'offset', value: 1})\n    } else {\n      offset = ofs.value\n    }\n    var fa = _.find(criteria, function(obj) {\n      return obj.field && obj.field === 'fetchAll'\n    })\n    if (fa && fa.value) fetchAll = true\n  } else if (_.isObject(criteria)) {\n    limit = criteria.limit = criteria.limit || 1000\n    offset = criteria.offset = criteria.offset || 1\n    if (criteria.fetchAll) fetchAll = true\n  }\n\n  if (criteria && !_.isFunction(criteria)) {\n    url += module.criteriaToString(criteria) || ''\n    url = url.replace(/%/g, '%25')\n             .replace(/'/g, '%27')\n             .replace(/=/g, '%3D')\n             .replace(/</g, '%3C')\n             .replace(/>/g, '%3E')\n             .replace(/&/g, '%26')\n             .replace(/#/g, '%23')\n             .replace(/\\\\/g, '%5C')\n             .replace(/\\+/g, '%2B')\n  }\n  url = url.replace('@@', '=')\n\n  return new Promise(function(resolve, reject) {\n    module.requestPromise(context, 'get', {url: url}, null).then(function(data) {\n      var fields = Object.keys(data.QueryResponse)\n      var key = _.find(fields, function(k) { return k.toLowerCase() === entity.toLowerCase()})\n      if (fetchAll) {\n        if (data && data.QueryResponse && data.QueryResponse.maxResults === limit) {\n          if (_.isArray(criteria)) {\n            _.each(criteria, function(e) {\n              if (e.field === 'offset') e.value = e.value + limit\n            })\n          } else if (_.isObject(criteria)) {\n            criteria.offset = criteria.offset + limit\n          }\n          return module.query(context, entity, criteria).then(function(more) {\n            data.QueryResponse[key] = data.QueryResponse[key].concat(more.QueryResponse[key] || [])\n            data.QueryResponse.maxResults = data.QueryResponse.maxResults + (more.QueryResponse.maxResults || 0)\n            data.time = more.time || data.time\n            resolve(data)\n          })\n        } else {\n          resolve(data)\n        }\n      } else {\n        resolve(data)\n      }\n    }).catch(function(err) {\n      reject(err)\n    })\n  })\n}\n\n\n// **********************  Report Api **********************\nmodule.report = function(context, reportType, criteria, callback) {\n  var url = '/reports/' + reportType\n  if (criteria && typeof criteria !== 'function') {\n    url += module.reportCriteria(criteria) || ''\n  }\n  module.request(context, 'get', {url: url}, null, typeof criteria === 'function' ? criteria : callback)\n}\n\n\nmodule.oauth = function(context) {\n  return {\n    consumer_key:    context.consumerKey,\n    consumer_secret: context.consumerSecret,\n    token:           context.token,\n    token_secret:    context.tokenSecret\n  }\n}\n\nmodule.isNumeric = function(n) {\n  return ! isNaN(parseFloat(n)) && isFinite(n);\n}\n\nmodule.checkProperty = function(field, name) {\n  return (field && field.toLowerCase() === name)\n}\n\nmodule.toCriterion = function(c) {\n  var fields = _.keys(c)\n  if (_.intersection(fields, ['field', 'value']).length === 2) {\n    return {\n      field: c.field,\n      value: c.value,\n      operator: c.operator || '='\n    }\n  } else {\n    return fields.map(function(k) {\n      return {\n        field: k,\n        value: c[k],\n        operator: _.isArray(c[k]) ? 'IN' : '='\n      }\n    })\n  }\n}\n\nmodule.criteriaToString = function(criteria) {\n  if (_.isString(criteria)) return criteria.indexOf(' ') === 0 ? criteria : \" \" + criteria\n  var cs = _.isArray(criteria) ? criteria.map(module.toCriterion) : module.toCriterion(criteria)\n  var flattened = _.flatten(cs)\n  var sql = '', limit, offset, desc, asc\n  for (var i=0, l=flattened.length; i<l; i++) {\n    var criterion = flattened[i];\n    if (module.checkProperty(criterion.field, 'fetchall')) {\n      continue\n    }\n    if (module.checkProperty(criterion.field, 'limit')) {\n      limit = criterion.value\n      continue\n    }\n    if (module.checkProperty(criterion.field, 'offset')) {\n      offset = criterion.value\n      continue\n    }\n    if (module.checkProperty(criterion.field, 'desc')) {\n      desc = criterion.value\n      continue\n    }\n    if (module.checkProperty(criterion.field, 'asc')) {\n      asc = criterion.value\n      continue\n    }\n    if (sql != '') {\n      sql += ' and '\n    }\n    sql += criterion.field + ' ' + criterion.operator + ' '\n    var quote = function(x) {\n      return _.isString(x) ? \"'\" + x + \"'\" : x\n    }\n    if (_.isArray(criterion.value)) {\n      sql += '(' + criterion.value.map(quote).join(',') + ')'\n    } else {\n      sql += quote(criterion.value)\n    }\n  }\n  if (sql != '') {\n    sql = ' where ' + sql\n  }\n  if (asc)  sql += ' orderby ' + asc + ' asc'\n  if (desc) sql += ' orderby ' + desc + ' desc'\n  sql += ' startposition ' + (offset || 1)\n  sql += ' maxresults ' + (limit || 1000)\n  return sql\n}\n\nmodule.reportCriteria = function(criteria) {\n  var s = '?'\n  for (var p in criteria) {\n    s += p + '=' + criteria[p] + '&'\n  }\n  return s\n}\n\nmodule.capitalize = function(s) {\n  return s.substring(0, 1).toUpperCase() + s.substring(1)\n}\n\nQuickBooks.prototype.capitalize = module.capitalize\n\nmodule.pluralize = function(s) {\n  var last = s.substring(s.length - 1)\n  if (last === 's') {\n    return s + \"es\"\n  } else if (last === 'y') {\n    return s.substring(0, s.length - 1) + \"ies\"\n  } else {\n    return s + 's'\n  }\n}\n\nQuickBooks.prototype.pluralize = module.pluralize\n\nmodule.unwrap = function(callback, entityName) {\n  if (! callback) return function(err, data) {}\n  return function(err, data) {\n    if (err) {\n      if (callback) callback(err)\n    } else {\n      var name = module.capitalize(entityName)\n      if (callback) callback(err, (data || {})[name] || data)\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-node-quickbooks/node_modules/node-quickbooks/config.js":"module.exports = {\n  consumerKey:     '',\n  consumerSecret:  '',\n  token:           '',\n  tokenSecret:     '',\n  realmId:         '',\n  useSandbox:      true,\n  debug:           false,\n  //\n  // Set useSandbox to false when moving to production. For info, see the following url:\n  // https://developer.intuit.com/v2/blog/2014/10/24/intuit-developer-now-offers-quickbooks-sandboxes\n  \n  testEmail:       ''  // Use this email address for testing send*Pdf functions\n}\n"}